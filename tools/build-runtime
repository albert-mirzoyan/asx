#!/usr/bin/env node
var babel = require('babel');
var fs = require('fs');
var path = require('path');
var config = {
    runtime     : {
        src     : path.resolve(__dirname,'../src/runtime'),
        out     : path.resolve(__dirname,'../lib/runtime.js'),
        files   : [
            'loader.js',
            'mirrors.js',
            'index.js'
        ]
    }
};

function build_runtime(){
    var helpers = []; var sources = [];
    config.runtime.files.forEach((n=>{
        var file = path.resolve(config.runtime.src,n);
        var result = babel.transform(fs.readFileSync(file),{
            stage           : 0,
            blacklist       : ['strict'],
            modules         : 'ignore',
            moduleIds       : true,
            externalHelpers : true
        });
        sources.push(result.code);
        if(result.metadata.usedHelpers){
            result.metadata.usedHelpers.forEach(helper=>{
                if(helpers.indexOf(helper)<0){
                    helpers.push(helper);
                }
            })
        }
    }));
    sources.unshift(babel.buildExternalHelpers(helpers,'var'));
    sources.unshift('(function(global){');
    sources.push('})(typeof global!="undefined"?global:self);');
    sources = sources.join('\n');
    fs.writeFileSync(config.runtime.out,sources);
}
function watch_runtime(){
    build_runtime();
    fs.watch(config.runtime.src,function (event, filename) {
        if (filename && path.extname(filename)=='.js') {
            console.log('runtime: ' + filename);
            build_runtime();
        }
    });
}

if(process.argv.indexOf('-w')>=0){
    watch_runtime();
}else{
    build_runtime();
}
